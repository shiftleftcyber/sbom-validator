name: SBOM Generation, Signing, & Vulnerability Scanning

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  generate_sbom:
    name: 🔏 Generate & Sign SBOM
    runs-on: ubuntu-latest
    outputs:
      sanitized_ref: ${{ steps.vars.outputs.sanitized_ref }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
      
      - name: Sanitize branch name
        id: vars
        run: echo "sanitized_ref=${GITHUB_REF_NAME//\//-}" >> $GITHUB_OUTPUT

      - name: Generate SBOM (CycloneDX)
        uses: CycloneDX/gh-gomod-generate-sbom@v2
        with:
          version: v1
          args: mod -licenses -json -output-version 1.6 -output sbom-validator.${{ steps.vars.outputs.sanitized_ref }}.cdx.json
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign SBOM
        uses: shiftleftcyber/secure-sbom-action@v1.3.1
        with:
          sbom_file: sbom-validator.${{ steps.vars.outputs.sanitized_ref }}.cdx.json
          secure_sbom_action: sign
          api_key: ${{ secrets.SECURE_SBOM_API_KEY }}
          key_id: ${{ secrets.SECURE_SBOM_KEYID }}

      - name: Verify SBOM
        uses: shiftleftcyber/secure-sbom-action@v1.3.1
        with:
          sbom_file: sbom-validator.${{ steps.vars.outputs.sanitized_ref }}.cdx.signed.json
          secure_sbom_action: verify
          api_key: ${{ secrets.SECURE_SBOM_API_KEY }}
          key_id: ${{ secrets.SECURE_SBOM_KEYID }}

      - name: Upload SBOM Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: |
            sbom-validator.${{ steps.vars.outputs.sanitized_ref }}.cdx.json
            sbom-validator.${{ steps.vars.outputs.sanitized_ref }}.cdx.signed.json

      - name: Add Job Summary
        run: |
          echo "### 🔏 SBOM Lifecycle Completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM generated, signed, and verified successfully" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 Artifacts uploaded for transparency" >> $GITHUB_STEP_SUMMARY
    
  osv-scan:
    name: 🔎 OSV Scan
    needs: generate_sbom
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Download Signed SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom-artifacts
          path: .

      - name: Run OSV Scanner
        run: |
          SAFE_REF="${{ needs.generate_sbom.outputs.sanitized_ref || github.ref_name }}"
          SAFE_REF="${SAFE_REF//\//-}"
          docker run --rm -v ${{ github.workspace }}:/opt --workdir /opt ghcr.io/google/osv-scanner:latest \
            scan --lockfile sbom-validator.${SAFE_REF}.cdx.json \
            --format json --output osv-scan-report.json || true

      - name: Upload OSV Report
        uses: actions/upload-artifact@v4
        with:
          name: osv-scan-report
          path: osv-scan-report.json
    
      - name: Enforce Security Gate
        id: enforce-gate
        run: |
          echo "🔍 Evaluating OSV scan results..."
          COUNT=$(jq '[.results[] | select(.severity == "HIGH" or .severity == "CRITICAL")] | length' osv-scan-report.json)
          if [ "$COUNT" -gt 0 ]; then
            echo "❌ Blocking release - $COUNT high/critical vulnerabilities detected!"
            jq '.results[] | select(.severity == "HIGH" or .severity == "CRITICAL") | {package: .package.name, severity: .severity, summary: .summary}' osv-scan-report.json
            echo "blocked=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ No blocking vulnerabilities found."
            echo "blocked=false" >> $GITHUB_OUTPUT
          fi
    
      - name: Add Job Summary
        if: always()
        run: |
          echo "### 🔒 OSV Vulnerability Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Scan file:** \`osv-scan-report.json\`" >> $GITHUB_STEP_SUMMARY
          if [[ '${{ steps.enforce-gate.outputs.blocked }}' == 'true' ]]; then
            echo "- ❌ **High/Critical vulnerabilities found — release blocked**" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ **No blocking vulnerabilities detected — safe to proceed**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "For full report, download the [osv-scan-report artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
